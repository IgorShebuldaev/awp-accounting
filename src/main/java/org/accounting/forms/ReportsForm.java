package org.accounting.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.accounting.database.models.Delivery;
import org.accounting.forms.reports.Report;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class ReportsForm extends JDialog implements ActionListener {
    private JSpinner spinnerDateFrom;
    private JSpinner spinnerDateTo;
    private JButton showButton;
    private JLabel labelFrom;
    private JLabel labelTo;
    private JPanel panelReports;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

    ReportsForm() {
        createForm();

        spinnerDateFrom.setModel(new SpinnerDateModel());
        spinnerDateFrom.setEditor(new JSpinner.DateEditor(spinnerDateFrom, "dd.MM.yyyy"));
        spinnerDateFrom.setValue(new Date());

        spinnerDateTo.setModel(new SpinnerDateModel());
        spinnerDateTo.setEditor(new JSpinner.DateEditor(spinnerDateTo, "dd.MM.yyyy"));
        spinnerDateTo.setValue(new Date());
    }

    private void createForm() {
        setContentPane(panelReports);
        setSize(450, 100);
        setLocationRelativeTo(null);
        setTitle("Reports");
        setModalityType(ModalityType.APPLICATION_MODAL);

        showButton.addActionListener(this);
    }

    private void showReport() {
        JDialog reportForm = new JDialog();
        JTextPane report = new JTextPane();
        reportForm.setModalityType(ModalityType.APPLICATION_MODAL);

        report.setContentType("text/html");
        report.setEditable(false);
        report.setBackground(Color.white);
        report.setText(getReport());

        reportForm.getContentPane().add(report);
        reportForm.pack();

        reportForm.setLocationRelativeTo(null);
        reportForm.setVisible(true);
    }

    private String getReport()  {
        String from = dateFormat.format(spinnerDateFrom.getValue());
        String to = dateFormat.format(spinnerDateTo.getValue());
        ArrayList<Delivery> results = new Delivery().getRecordsByDate(from,to);

        Report report = new Report();
        report.addHeader("Delivery",new String[]{"Delivery date","Supplier","Product","Price","Worker"});
        for (Delivery delivery : results) {
            report.insertOpenTr();
            report.insertRow(delivery.getDeliveryDate().toString());
            report.insertRow(delivery.getSupplier().getName());
            report.insertRow(delivery.getProduct());
            report.insertRow(delivery.getPrice());
            report.insertRow(delivery.getWorker().getFullName());
            report.insertCloseTr();
        }

        report.insertCloseTable();

        return report.getDocument().toString();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if ("show".equals(e.getActionCommand())) {
            showReport();
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelReports = new JPanel();
        panelReports.setLayout(new GridLayoutManager(1, 5, new Insets(5, 5, 5, 5), -1, -1));
        spinnerDateFrom = new JSpinner();
        panelReports.add(spinnerDateFrom, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spinnerDateTo = new JSpinner();
        panelReports.add(spinnerDateTo, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showButton = new JButton();
        showButton.setActionCommand("show");
        showButton.setText("Show");
        panelReports.add(showButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelFrom = new JLabel();
        labelFrom.setText("From");
        panelReports.add(labelFrom, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelTo = new JLabel();
        labelTo.setText("To");
        panelReports.add(labelTo, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelReports;
    }

}
